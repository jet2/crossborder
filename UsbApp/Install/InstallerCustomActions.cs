using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration.Install;
using System.Windows.Forms;
using System.Text;
using Microsoft.Win32;
using System.IO;

namespace kppApp.Install
{
	[RunInstaller(true)]
	public partial class InstallerCustomActions : Installer
	{
		/// <summary>
		/// Default constructor, used by the designer. This is generated by 
		/// 'Add New Item' wizard when you add an installer class.
		/// </summary>
		public InstallerCustomActions()
		{
			InitializeComponent();
		}

		/// <summary>
		/// To cause this method to be invoked, I added the primary project output to the 
		/// setup project's custom actions, under the "Install" folder.
		/// </summary>
		/// <param name="stateSaver">A dictionary object that will be retrievable during the uninstall process.</param>
		public override void Install(System.Collections.IDictionary stateSaver)
		{
			// Get the custom parameters from the install context.
			CustomParameters customParameters = new CustomParameters(this.Context);

			SaveCustomParametersInStateSaverDictionary(stateSaver, customParameters);

			//PrintMessage("The application is being installed.", customParameters);

			base.Install(stateSaver);
		}

		/// <summary>
		/// Adds or updates the state dictionary so that custom parameter values can be retrieved when 
		/// the application is uninstalled.
		/// </summary>
		/// <param name="stateSaver">An IDictionary object that will contain all the objects who's state is to be persisted across installations.</param>
		/// <param name="customParameters">A strong typed object of custom parameters that will be saved.</param>
		private void SaveCustomParametersInStateSaverDictionary(System.Collections.IDictionary stateSaver, CustomParameters customParameters)
		{
			var SpecialDataFolder = Path.Combine(Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments)).FullName, "PSISoftware", "AppKPP");
			var xFile = Path.Combine(SpecialDataFolder, "presettings.json");
			var text1 = $"{{\"restapi_path\"=\"{customParameters.url}\", \"passage_direction\"=\"{customParameters.direction}\", \"reader_id\"=\"{customParameters.reader}\"}}";
			/*
						// Add/update the "MyCustomParameter" entry in the state saver so that it may be accessed on uninstall.
						if (stateSaver.Contains(CustomParameters.Keys.MyCustomParameter) == true)
						{
							stateSaver[CustomParameters.Keys.MyCustomParameter] = customParameters.MyCustomParameter;
						}
						else
							stateSaver.Add(CustomParameters.Keys.MyCustomParameter, customParameters.MyCustomParameter);

						// Add/update the "MyOtherCustomParameter" entry in the state saver so that it may be accessed on uninstall.
						if (stateSaver.Contains(CustomParameters.Keys.MyOtherCustomParameter) == true)
						{
							stateSaver[CustomParameters.Keys.MyOtherCustomParameter] = customParameters.MyOtherCustomParameter;

						}
						else
							stateSaver.Add(CustomParameters.Keys.MyOtherCustomParameter, customParameters.MyOtherCustomParameter);
			*/
			File.WriteAllText(xFile, text1);
		}

		/// <summary>
		/// To cause this method to be invoked, I added the primary project output to the 
		/// setup project's custom actions, under the "Uninstall" folder.
		/// </summary>
		/// <param name="savedState">An IDictionary object that will contain objects that were set as 
		/// part of the installation process.</param>
		public override void Uninstall(System.Collections.IDictionary savedState)
		{
			// Get the custom parameters from the saved state.
			CustomParameters customParameters = new CustomParameters(savedState);

			//PrintMessage("The application is being uninstalled.", customParameters);

			base.Uninstall(savedState);
		}

		/// <summary>
		/// A helper method that prints out the passed message, and a dumps the custom parameters object to a message box.
		/// </summary>
		/// <param name="message">The message header to place in the message box.</param>
		/// <param name="customParameters">A strong typed object of valid command line parameters.</param>
		private void PrintMessage(string message, CustomParameters customParameters)
		{
			/*
			string outputMessage = string.Format("{0}\r\nThe parameters that were recorded during install are:\r\n\r\n\t{1} = {2}\r\n\t{3} = {4}",
				message,
				CustomParameters.Keys.MyCustomParameter, customParameters.MyCustomParameter,
				CustomParameters.Keys.MyOtherCustomParameter, customParameters.MyOtherCustomParameter);

			MessageBox.Show(outputMessage, "Installer Custom Action Fired!", MessageBoxButtons.OK, MessageBoxIcon.Information);
			*/
		}

		/// <summary>
		/// This method dumps the current contents of the context to a message box window.
		/// It's not used in this example, but it comes in handy to determine
		/// what's available in the context.
		/// </summary>
		private void DumpContext()
		{
			/*
			StringBuilder stringBuilder = new StringBuilder();

			stringBuilder.Append("Contents of Context.Parameters:\r\n");

			foreach (string key in this.Context.Parameters.Keys)
				stringBuilder.AppendFormat("\tKey: {0} = {1}\r\n", key, this.Context.Parameters[key]);

			MessageBox.Show(stringBuilder.ToString(), "Contents of the Installer context.", MessageBoxButtons.OK, MessageBoxIcon.Information);
			*/
		}
	}
}